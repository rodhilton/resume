#!/usr/bin/env ruby

unless Kernel.respond_to?(:require_relative)
  module Kernel
    def require_relative(path)
      require File.join(File.dirname(caller[0]), path.to_str)
    end
  end
end

require_relative 'templator'
require 'optparse'

options = {}

BANNER = "Usage: templator [options] template_file ..."

optparse = OptionParser.new do|opts|
  opts.banner = BANNER

  opts.on('-d', '--data-files FILE1,FILE2,FILE3', Array, 'Use data files for templating') do |file|
    options[:data_files] = file
  end

  options[:flags] = {}
  opts.on('-f', '--flag name[:value]', 'Sets a flag with optional value') do |flag|
    if flag =~ /(.*?):(.*)/
      flag_match=Regexp.last_match
      options[:flags][flag_match[1].to_sym]=flag_match[2]
    else
      options[:flags][flag.to_sym]=true
    end
  end

  # This displays the help screen, all programs are
  # assumed to have this option.
  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end
end

optparse.parse!

if ARGV[0].nil?
  puts BANNER
  exit
end

template_contents = File.read(ARGV[0])

if template_contents.nil?
  puts "Could not read file #{ARGV[0]}"
  exit
end

templator = Templator.new(template_contents)

if options[:data_files]
  data_files = options[:data_files].collect{ |data_file| File.read(data_file) || "---#Empty" }
else
  data_files = ["---#Empty"]
end

result = templator.fill_in(data_files, options[:flags])

puts result
